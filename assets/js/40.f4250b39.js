(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{357:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"keywords"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keywords"}},[t._v("#")]),t._v(" keywords")]),t._v(" "),s("h3",{attrs:{id:"signed-integers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signed-integers"}},[t._v("#")]),t._v(" signed integers")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("i8 i16 i32 i64 i128\ni8! i16! i32! i64! i128!\ni8? i16? i32? i64? i128?\n")])])]),s("h3",{attrs:{id:"unsigned-integers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unsigned-integers"}},[t._v("#")]),t._v(" unsigned integers")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("u8 u16 u32 u64 u128\nu8! u16! u32! u64! u128!\nu8? u16? u32? u64? u128?\n")])])]),s("h3",{attrs:{id:"sized-integers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sized-integers"}},[t._v("#")]),t._v(" sized integers")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("isize usize int integer uint\nisize! usize! int! integer! uint!\nisize? usize? int? integer? uint?\n")])])]),s("h3",{attrs:{id:"float"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#float"}},[t._v("#")]),t._v(" float")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("f32 f64 float double\nf32! f64! float! double!\nf32? f64? float? double?\n")])])]),s("h3",{attrs:{id:"chars"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chars"}},[t._v("#")]),t._v(" chars")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("char uchar\nchar! uchar!\nchar? uchar?\n")])])]),s("h3",{attrs:{id:"logic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logic"}},[t._v("#")]),t._v(" logic!")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("logic logic! logic?\ntrue false yes no off on\n")])])]),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cstring wstring string\ncstring! wstring! string!\ncstring? wstring? string?\n")])])]),s("h3",{attrs:{id:"big-integer-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#big-integer-number"}},[t._v("#")]),t._v(" big integer/number")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bignum bigint -bigint\n")])])]),s("h3",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" code")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("code code! code?\n")])])]),s("h3",{attrs:{id:"func"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#func"}},[t._v("#")]),t._v(" func")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("func function\nfunction!\nfunction?\n")])])]),s("h3",{attrs:{id:"pointer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pointer"}},[t._v("#")]),t._v(" pointer")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("pointer *\n")])])]),s("h3",{attrs:{id:"others"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#others"}},[t._v("#")]),t._v(" others")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct enum\ntype type?\ndeclare const static\npush pop\ncontext import tests test\nasync await\ncatch throw\nassert\nif while switch default case do all any forall foreach until break continue \nreturn exit quit\n/local return: ->\nand not or xor complement\nnull\n+-*/ ** > >= < <= = <> \n// % %%\n<< >> >>>\n? ??\ncomment\nvolatile\nvalue?\nas to\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);